#include <bits/stdc++.h> 

vector<long> spiralPathMatrix(vector<vector<long> > matrix,long m,long n)
{
     long i;
     long k = 0;
     long l = 0;
 
    /*  
        k - starting row index
        m - ending row index
        l - starting column index
        n - ending column index
        i - iterator
    */
 
    // Make vector to store the path
    vector<long> path;

    while (k < m && l < n) 
    {
        // Push the first row from the remaining rows 
        for (i = l; i < n; ++i) 
        {
            path.push_back(matrix[k][i]);
        }
        k= k + 1;
 
        // Push the last column from the remaining columns */
        for (i = k; i < m; ++i) 
        {
            path.push_back(matrix[i][n - 1]);
        }
        n = n - 1;
 
        // Push the last row from the remaining rows 
        if (k < m)
        {
            for (i = n - 1; i >= l; --i) 
            {
                path.push_back(matrix[m - 1][i]);
            }
            m = m - 1;
        }
 
        // Push the first column from the remaining columns 
        if (l < n) 
        {
            for (i = m - 1; i >= k; --i) 
            {
                path.push_back(matrix[i][l]);
            }
            l = l + 1;
        }
    }

    return path;
}
